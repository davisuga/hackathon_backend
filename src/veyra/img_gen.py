import base64
import uuid
import os
import asyncio
import aioboto3
from openai import AsyncOpenAI
from google import genai


BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
ENDPOINT_URL = os.getenv("S3_ENDPOINT_URL")
REGION_NAME = "us-east-1"
ACCESS_KEY = os.getenv("AWS_ACCESS_KEY")
SECRET_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")


openai_client = AsyncOpenAI()
gemini_client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))


async def generate_openai(prompt: str, resolution: str = "1024x1024") -> bytes:
    """Generate image bytes using OpenAI DALLÂ·E (gpt-image-1)."""
    response = await openai_client.images.generate(
        model="gpt-image-1",
        prompt=prompt,
        size=resolution,
        n=1,
    )
    if not response.data:
        raise ValueError("No image generated by OpenAI")

    image_base64 = response.data[0].b64_json
    if not image_base64:
        raise ValueError("OpenAI did not return base64")

    return base64.b64decode(image_base64)


async def generate_gemini(prompt: str, resolution: str = "1024x1024") -> bytes:
    """Generate image bytes using Gemini Imagen API."""

    response = gemini_client.models.generate_images(
        model="imagen-4.0-generate-001",
        prompt=prompt,
    )
    if not response.generated_images:
        raise ValueError("No image generated by Gemini")
    return response.generated_images[0].image.image_bytes


async def upload_to_s3(image_bytes: bytes, ext: str = "png") -> str:
    filename = f"{uuid.uuid4()}.{ext}"
    session = aioboto3.Session()

    async with session.resource(
        "s3",
        region_name=REGION_NAME,
        endpoint_url=ENDPOINT_URL,
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
    ) as s3:
        bucket = await s3.Bucket(BUCKET_NAME)

        obj = await bucket.Object(filename)
        await obj.put(
            Body=image_bytes,
            ContentType=f"image/{ext}",
        )

    return f"{ENDPOINT_URL}/{BUCKET_NAME}/{filename}"


async def generate_image(
    prompt: str,
    engine: str = "gemini",
    resolution: str = "1024x1024",
) -> str:
    """Generate an image with OpenAI or Gemini, upload to S3, return public URL."""
    if engine == "openai":
        image_bytes = await generate_openai(prompt, resolution)
    elif engine == "gemini":
        image_bytes = await generate_gemini(prompt, resolution)
    else:
        raise ValueError(f"Unknown engine: {engine}")

    return await upload_to_s3(image_bytes)
