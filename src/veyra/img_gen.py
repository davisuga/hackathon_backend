import base64
from typing import TypedDict
import uuid
import os
import aioboto3
from openai import AsyncOpenAI
from google import genai
from google.genai.types import GenerateImagesConfigDict


BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
ENDPOINT_URL = os.getenv("S3_ENDPOINT_URL")
REGION_NAME = os.getenv("REGION_NAME") or "us-east-1"
ACCESS_KEY = os.getenv("AWS_ACCESS_KEY")
SECRET_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
print(
    "S3_BUCKET_NAME", BUCKET_NAME,
    "S3_ENDPOINT_URL", ENDPOINT_URL,
    "REGION_NAME", REGION_NAME,
    "AWS_ACCESS_KEY", ACCESS_KEY,
    "AWS_SECRET_ACCESS_KEY", SECRET_KEY,
)

openai_client = AsyncOpenAI()
gemini_client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))


async def generate_openai(prompt: str, resolution: str = "1024x1024") -> bytes:
    """Generate image bytes using OpenAI DALLÂ·E (gpt-image-1)."""
    response = await openai_client.images.generate(
        model="gpt-image-1",
        prompt=prompt,
        size=resolution,
        n=1,
    )
    if not response.data:
        raise ValueError("No image generated by OpenAI")

    image_base64 = response.data[0].b64_json
    if not image_base64:
        raise ValueError("OpenAI did not return base64")

    return base64.b64decode(image_base64)


async def generate_gemini(prompt: str, resolution: str = "1024x1024") -> bytes:
    """Generate image bytes using Gemini Imagen API."""
    # with open(
    #     './image.png'
    # , 'rb') as f:
    #     return f.read()
    response = gemini_client.models.generate_images(
        model="imagen-4.0-fast-generate-001",
        prompt=prompt,
        config=GenerateImagesConfigDict(number_of_images=1),
    )
    if not response.generated_images:
        raise ValueError("No image generated by Gemini")
    return response.generated_images[0].image.image_bytes


async def upload_to_s3(image_bytes: bytes, ext: str = "png") -> str:
    filename = f"{uuid.uuid4()}.{ext}"
    session = aioboto3.Session()

    async with session.resource(
        "s3",
        region_name=REGION_NAME,
        endpoint_url=f"{ENDPOINT_URL}/s3",
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
    ) as s3:
        bucket = await s3.Bucket(BUCKET_NAME)

        obj = await bucket.Object(filename)
        await obj.put(
            Body=image_bytes,
            ContentType=f"image/{ext}",
        )

    return f"{ENDPOINT_URL}/object/public/{BUCKET_NAME}/{filename}"


class ImageGenerationOutput(TypedDict):
    image_url: str
    image_bytes: bytes


async def generate_image(
    prompt: str,
    engine: str = "gemini",
    resolution: str = "1024x1024",
) -> ImageGenerationOutput:
    """Generate an image with OpenAI or Gemini, upload to S3, return public URL."""
    try:
        if engine == "openai":
            image_bytes = await generate_openai(prompt, resolution)
        elif engine == "gemini":
            image_bytes = await generate_gemini(prompt + "\n resolution: " + resolution)
        else:
            raise ValueError(f"Unknown engine: {engine}")

        return {"image_url": await upload_to_s3(image_bytes), "image_bytes": image_bytes}
    except Exception as e:
        print(f"Error generating image: {e}")
        # Return a default image in case of failure
        with open('./image.png', 'rb') as f:
            image_bytes = f.read()
        return {"image_url": await upload_to_s3(image_bytes), "image_bytes": image_bytes}
